name: Django CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DB_ENGINE: ${{ secrets.DB_ENGINE }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: localhost
      DB_PORT: ${{ secrets.DB_PORT }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: core
          POSTGRES_PASSWORD: 12345678
          POSTGRES_DB: coredb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: psycopg2 prerequisites
      run: sudo apt-get install -y libpq-dev
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Apply Migrations and Create Database
      run: |
        python manage.py migrate
    # - name: Run Tests
    #   run: |
    #     python manage.py test

  deploy:
    name: Deploying
    needs: [test]
    runs-on: ubuntu-latest
    env:
      EC2_HOST_DNS: ${{ secrets.EC2_HOST_DNS }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DB_ENGINE: ${{ secrets.DB_ENGINE }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST}}
      DB_PORT: ${{ secrets.DB_PORT }}
    steps:
    - name: Install docker on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_DNS }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY_PEM }}
        script: |
            sudo su
            sudo apt-get update
            yes | sudo apt-get install docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            sudo usermod -aG docker ubuntu
            exec bash
    - name: Install docker-compose on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_DNS }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY_PEM }}
        script: |
            sudo su
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version
    - name: Deploying Application
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_DNS }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY_PEM }}
        script: |
            sudo su
            docker stop core_web core_app core_db
            docker rm core_web core_app core_db
            rm -rf tcc-11-full-stack-mangabo-2
            git clone https://github.com/carolahn/tcc-11-full-stack-mangabo-2.git
            cd tcc-11-full-stack-mangabo-2
            sudo docker-compose -f docker-compose.prod.yml up --build -d
            
      
    - name: Setup PostgreSQL
      run: |
        sudo docker exec -it core_db psql -U postgres -c "CREATE DATABASE coredb;"
        sudo docker exec -it core_db psql -U postgres -c "CREATE USER core WITH PASSWORD '12345678';"
        sudo docker exec -it core_db psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE coredb TO core;"
      env:
        DB_USER: ${{ secrets.DB_USER }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_HOST: ${{ secrets.DB_HOST }}